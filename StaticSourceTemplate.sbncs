# nullable enable
// <auto-generated/>
using System;
using Godot;
using System.Collections.Generic;

namespace HLNC.Serialization
{
    public static partial class NetworkScenesRegister
    {
        private static Dictionary<byte, string> SCENES_MAP = new Dictionary<byte, string>(){
            {{ for scene in ScenesMap }}
                { {{scene.Key}}, "{{scene.Value}}" },
            {{ end }}
        };

        private static Dictionary<string, byte> SCENES_PACK = new Dictionary<string, byte>(){
            {{ for scene in ScenesMap }}
                { "{{scene.Value}}", {{scene.Key}} },
            {{ end }}
        };

        /// <summary>
        /// A map of every packed scene to a list of paths to its internal network nodes.
        /// </summary>
        internal static Dictionary<byte, Dictionary<byte, string>> STATIC_NETWORK_NODE_PATHS_MAP = new Dictionary<byte, Dictionary<byte, string>>(){
            {{ for scene in StaticNetworkNodesMap }}
                { {{scene.Key}}, new Dictionary<byte, string>(){
                    {{ for node in scene.Value }}
                        { {{node.Item1}}, "{{node.Item2}}" },
                    {{ end }}
                } },
            {{ end }}
        };

        internal static Dictionary<string, Dictionary<string, Dictionary<string, CollectedNetworkProperty>>> PROPERTIES_MAP = new Dictionary<string, Dictionary<string, Dictionary<string, CollectedNetworkProperty>>>(){
            {{ for scene in PropertiesMap }}
                {
                    "{{scene.Key}}", new Dictionary<string, Dictionary<string, CollectedNetworkProperty>>() {
                        {{ for node in scene.Value }}
                            {
                                "{{node.Key}}", new Dictionary<string, CollectedNetworkProperty>() {
                                    {{ for property in node.Value }}
                                        { "{{property.Key}}", new CollectedNetworkProperty{
                                                NodePath = "{{node.Key}}",
                                                Name = "{{property.Value.Name}}",
                                                Type = (Variant.Type){{property.Value.Type}},
                                                Subtype = (HLNC.Serialization.VariantSubtype){{property.Value.Subtype}},
                                                Index = {{property.Value.Index}},
                                                InterestMask = {{property.Value.InterestMask}},
                                            }
                                        },
                                    {{ end }}
                                }
                            },
                        {{ end }}
                    }
                },
            {{ end }}
        };
                                    

        private static Dictionary<byte, PackedScene> SCENES_CACHE = [];

        public static byte PackScene(string scene) {
            return SCENES_PACK[scene];
        }

        public static PackedScene UnpackScene(byte sceneId) {
            if (!SCENES_CACHE.ContainsKey(sceneId)) {
                SCENES_CACHE[sceneId] = GD.Load<PackedScene>(SCENES_MAP[sceneId]);
            } 
            return SCENES_CACHE[sceneId];
        }
    }
}