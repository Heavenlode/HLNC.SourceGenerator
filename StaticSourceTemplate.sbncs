# nullable enable
// <auto-generated/>
using System;
using Godot;
using System.Collections.Generic;
using System.Linq;
using MongoDB.Bson;

namespace HLNC.Serialization
{
    public static partial class NetworkScenesRegister
    {
        private static Dictionary<byte, string> SCENES_MAP = new Dictionary<byte, string>(){
            {{ for scene in ScenesMap }}
                { {{scene.Key}}, "{{scene.Value}}" },
            {{ end }}
        };

        private static Dictionary<string, byte> SCENES_PACK = new Dictionary<string, byte>(){
            {{ for scene in ScenesMap }}
                { "{{scene.Value}}", {{scene.Key}} },
            {{ end }}
        };

        /// <summary>
        /// A map of every packed scene to a list of paths to its internal network nodes.
        /// </summary>
        private static Dictionary<string, Dictionary<byte, string>> STATIC_NETWORK_NODE_PATHS_MAP = new Dictionary<string, Dictionary<byte, string>>(){
            {{ for scene in StaticNetworkNodesMap }}
                { "{{scene.Key}}", new Dictionary<byte, string>(){
                    {{ for node in scene.Value }}
                        { {{node.Item1}}, "{{node.Item2}}" },
                    {{ end }}
                } },
            {{ end }}
        };

        private static Dictionary<string, Dictionary<string, byte>> STATIC_NETWORK_NODE_PATHS_PACK = new Dictionary<string, Dictionary<string, byte>>(){
            {{ for scene in StaticNetworkNodesMap }}
                { "{{scene.Key}}", new Dictionary<string, byte>(){
                    {{ for node in scene.Value }}
                        { "{{node.Item2}}", {{node.Item1}} },
                    {{ end }}
                } },
            {{ end }}
        };

        private static Dictionary<string, Dictionary<string, Dictionary<string, CollectedNetworkProperty>>> PROPERTIES_MAP = new Dictionary<string, Dictionary<string, Dictionary<string, CollectedNetworkProperty>>>(){
            {{ for scene in PropertiesMap }}
                {{ i = 0 }}
                {
                    "{{scene.Key}}", new Dictionary<string, Dictionary<string, CollectedNetworkProperty>>() {
                        {{ for node in scene.Value }}
                            {
                                "{{node.Key}}", new Dictionary<string, CollectedNetworkProperty>() {
                                    {{ for property in node.Value }}
                                        { "{{property.Key}}", new CollectedNetworkProperty{
                                                NodePath = "{{node.Key}}",
                                                Name = "{{property.Value.Name}}",
                                                Type = (Variant.Type){{property.Value.Type}},
                                                Subtype = (HLNC.Serialization.VariantSubtype){{property.Value.Subtype}},
                                                Index = {{i++}},
                                                InterestMask = {{property.Value.InterestMask}},
                                                {{ if property.Value.NetworkSerializerClass != "" }}
                                                NetworkSerialize = Callable.From((WorldRunner currentWorld, NetPeer peer, {{property.Value.NetworkSerializerClass}} obj) =>
                                                {
                                                    return {{property.Value.NetworkSerializerClass}}.NetworkSerialize(currentWorld, peer, obj) as HLBuffer;
                                                }),
                                                NetworkDeserialize = Callable.From((WorldRunner currentWorld, HLBuffer buffer, {{property.Value.NetworkSerializerClass}} obj) =>
                                                {
                                                    return {{property.Value.NetworkSerializerClass}}.NetworkDeserialize(currentWorld, buffer, obj);
                                                }),
                                                {{ end }}
                                                {{ if property.Value.BsonSerializerClass != "" }}
                                                BsonDeserialize = (BsonValue doc) =>
                                                {
                                                    return {{property.Value.BsonSerializerClass}}.BsonDeserialize(doc);
                                                },
                                                {{ end }}
                                            }
                                        },
                                    {{ end }}
                                }
                            },
                        {{ end }}
                    }
                },
            {{ end }}
        };

        private static Dictionary<string, Dictionary<string, Dictionary<string, CollectedNetworkFunction>>> FUNCTIONS_MAP = new Dictionary<string, Dictionary<string, Dictionary<string, CollectedNetworkFunction>>>(){
            {{ for scene in FunctionsMap }}
                {{ i = 0 }}
                {
                    "{{scene.Key}}", new Dictionary<string, Dictionary<string, CollectedNetworkFunction>>() {
                        {{ for node in scene.Value }}
                            {
                                "{{node.Key}}", new Dictionary<string, CollectedNetworkFunction>() {
                                    {{ for function in node.Value }}
                                        { "{{function.Key}}", new CollectedNetworkFunction{
                                                NodePath = "{{node.Key}}",
                                                Name = "{{function.Value.Name}}",
                                                Index = {{i++}},
                                                Arguments = [
                                                    {{ for arg in function.Value.Arguments }}
                                                    new VariantType{
                                                        Type = Variant.Type.{{arg.Type}},
                                                        Subtype = VariantSubtype.{{arg.Subtype}},
                                                    },
                                                    {{ end }}
                                                ],
                                                WithPeer = {{function.Value.WithPeer}},
                                            }
                                        },
                                    {{ end }}
                                }
                            },
                        {{ end }}
                    }
                },
            {{ end }}
        };

        private static Dictionary<string, Dictionary<byte, CollectedNetworkFunction>> FUNCTIONS_LOOKUP = new Dictionary<string, Dictionary<byte, CollectedNetworkFunction>>(){
            {{ for scene in FunctionsMap }}
                {{ i = 0 }}
                {
                    "{{scene.Key}}", new Dictionary<byte, CollectedNetworkFunction>() {
                        {{ for node in scene.Value }}
                            {{ for function in node.Value }}
                                { {{i++}}, FUNCTIONS_MAP["{{scene.Key}}"]["{{node.Key}}"]["{{function.Key}}"] },
                            {{ end }}
                        {{ end }}
                    }
                },
            {{ end }}
        };

        private static Dictionary<string, Dictionary<byte, CollectedNetworkProperty>> PROPERTIES_LOOKUP = new Dictionary<string, Dictionary<byte, CollectedNetworkProperty>>(){
            {{ for scene in PropertiesMap }}
                {{ i = 0 }}
                {
                    "{{scene.Key}}", new Dictionary<byte, CollectedNetworkProperty>() {
                        {{ for node in scene.Value }}
                            {{ for property in node.Value }}
                                { {{i++}}, PROPERTIES_MAP["{{scene.Key}}"]["{{node.Key}}"]["{{property.Key}}"] },
                            {{ end }}
                        {{ end }}
                    }
                },
            {{ end }}
        };
    }
}